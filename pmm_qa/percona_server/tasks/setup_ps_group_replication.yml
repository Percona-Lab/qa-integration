- name: Generate my.cnf for each node
  template:
    src: ../data/my.cnf.j2
    dest: "{{ data_dir }}/node{{ item }}/my.cnf"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Create initialization script for each node
  template:
    src: ../data/init.sql.j2
    dest: "{{ data_dir }}/node{{ item }}/init.sql"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Remove old percona server group replication containers
  community.docker.docker_container:
    name: "ps_pmm_gr_{{ ps_version }}_{{ item }}"
    image: "percona/percona-server:{{ ps_version }}"
    restart_policy: always
    state: absent
  loop: "{{ range(1, nodes_count | int + 1) | list }}"
  ignore_errors: yes

- name: Start Percona Server containers with group replication
  community.docker.docker_container:
    name: "ps_pmm_gr_{{ ps_version }}_{{ item }}"
    image: "percona/percona-server:{{ ps_version }}"
    restart_policy: always
    state: started
    networks:
    - name: "{{ network_name }}"
    env:
      MYSQL_ROOT_PASSWORD: "{{ root_password }}"
    ports:
    - "{{ mysql_port + item - 1 }}:{{ mysql_listen_port }}"
    - "{{ group_seeds_port + item - 1 }}:{{ group_seeds_port }}"
    volumes:
    - "{{ data_dir }}/node{{ item }}/data:/var/lib/mysql"
    - "{{ data_dir }}/node{{ item }}/my.cnf:/etc/mysql/my.cnf"
    - "{{ data_dir }}/node{{ item }}/init.sql:/docker-entrypoint-initdb.d/init.sql"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Reset configuration for all nodes
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_{{ item }}"
    command: >
      mysql -uroot -p{{ root_password }} -e "
      RESET BINARY LOGS AND GTIDS;
      RESET REPLICA ALL;
      SET GLOBAL gtid_purged='';
      "
  loop: "{{ range(1, nodes_count | int + 1) | list }}"
  ignore_errors: yes

- name: Bootstrap first node in the cluster
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: >
      mysql -uroot -p{{ root_password }} -e "
      SET GLOBAL group_replication_bootstrap_group=ON;
      START GROUP_REPLICATION;
      SET GLOBAL group_replication_bootstrap_group=OFF;"
  retries: 5
  delay: 10
- name: Wait 5 seconds for bootstrap to complete
  pause:
    seconds: 5

- name: Start group replication on other nodes
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_{{ item }}"
    command: mysql -uroot -p{{ root_password }} -e "START GROUP_REPLICATION;"
  loop: "{{ range(2, nodes_count | int + 1) | list }}"
  ignore_errors: yes

- name: Wait 10 seconds for the other nodes to join
  pause:
    seconds: 10

- name: Create and seed a test database on primary
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: >
      mysql -uroot -p{{ root_password}} -e "
      CREATE DATABASE testdb;
      USE testdb;
      CREATE TABLE testdb (id INT PRIMARY KEY, data VARCHAR(100));
      INSERT INTO testdb VALUES (1, 'Initial data from node mysql1');"

- name: Check replication status on first node
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: mysql -uroot -p{{ root_password }} -e "SELECT * FROM performance_schema.replication_group_members;"
  register: replication_status

- name: Display replication status
  debug:
    var: replication_status.stdout

- name: Check replication group members count
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: mysql -uroot -p{{ root_password }} -e "SELECT COUNT(*) AS count FROM performance_schema.replication_group_members;"
  register: member_count

- name: Display member count
  debug:
    var: member_count.stdout

- name: Set verification instructions
  set_fact:
    verification_msg: |
      MySQL Cluster setup complete!

      To verify replication is working:
         1. Connect to the first node:
            docker exec -it ps_pmm_{{ ps_version }}_1 mysql -uroot -p{{ root_password }}

         2. Insert data in the test database:
            USE testdb;
            INSERT INTO testdb VALUES (100, 'Test replication');

         3. Connect to other nodes and verify data is replicated:
            docker exec -it ps_pmm_{{ ps_version }}_2 mysql -uroot -p{{ root_password }}
            USE testdb;
            SELECT * FROM testdb;

- name: Display verification instructions
  debug:
    msg: "{{ verification_msg | split('\n') }}"

- name: Add service to pmm server
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_{{ item }}"
    command: pmm-admin add mysql --query-source={{ query_source }} --username=root --password={{ root_password }} --environment=ps-gr-dev --cluster=ps-gr-dev-cluster --replication-set=ps-gr-replication ps_pmm_{{ ps_version }}_{{ item }} --debug 127.0.0.1:3306
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Prepare sysbench inside of all percona server nodes
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: >
      mysql -uroot -p{{ root_password }} -e "
      CREATE DATABASE sbtest;
      CREATE USER 'sbtest'@'localhost' IDENTIFIED BY 'password';
      GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'localhost';
      CREATE USER 'sbtest'@'127.0.0.1' IDENTIFIED BY 'password';
      GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'127.0.0.1';
      FLUSH PRIVILEGES;
      "

- name: Prepare data for sysbench inside of first percona server nodes
  community.docker.docker_container_exec:
    container: "ps_pmm_{{ ps_version }}_1"
    command: >
      sysbench /usr/share/sysbench/oltp_read_write.lua
        --mysql-host=127.0.0.1
        --mysql-port=3306
        --mysql-user=sbtest
        --mysql-password=password
        --mysql-db=sbtest
        --tables=10
        --table-size=100000
        prepare
