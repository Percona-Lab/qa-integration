---
# Percona Server 8.4 and higher single instance and also Cluster with Group Replication
- name: Setup Percona Server 8.4 and higher. Cluster with Group Replication in Docker
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    ps_version: "{{ lookup('env', 'PS_VERSION') | default('8.4', true) }}"
    cluster_name: "mysql_cluster"
    replication_user: "repl_user"
    replication_password: "GRgrO9301RuF"
    root_password: "GRgrO9301RuF"
    mysql_port: 33066
    mysql_listen_port: 3306
    group_seeds_port: 34061
    nodes_count: "{{ (lookup('env', 'NODES_COUNT') | default('3', true)) | int }}"
    network_name: "pmm-qa"
    data_dir: "{{ lookup('env', 'HOME') }}/mysql_cluster_data"
    server_id_start: 1
    pmm_server_ip: "{{ lookup('vars', 'extra_pmm_server_ip', default=lookup('env','PMM_SERVER_IP') | default('127.0.0.1', true) ) }}"
    client_version: "{{ lookup('vars', 'extra_client_version', default=lookup('env','CLIENT_VERSION') | default('3-dev-latest', true) ) }}"
    admin_password: "{{ lookup('vars', 'extra_admin_password', default=lookup('env','ADMIN_PASSWORD') | default('admin', true) ) }}"
    query_source: "{{ lookup('env', 'QUERY_SOURCE') | default('perfschema', true) }}"
    setup_type: "{{ lookup('env', 'SETUP_TYPE') }}"
    random_service_name_value: ""

  tasks:
    - name: Chance to correct nodes count for group replication
      set_fact:
        nodes_count: 3
      when: nodes_count | int < 3 and setup_type == "gr"

    - name: Chance to correct nodes count for async replication
      set_fact:
        nodes_count: 2
      when: nodes_count | int < 2 and setup_type == "replication"

    - name: Create Docker network
      community.docker.docker_network:
        name: "{{ network_name }}"
        state: present

    - name: "Remove old data folders"
      shell: 'rm -fr {{ data_dir }}'
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Create data directories
      file:
        path: "{{ data_dir }}/node{{ item }}/data"
        state: directory
        mode: '0755'
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Remove old percona server containers
      community.docker.docker_container:
        name: "ps_pmm_{{ ps_version }}_{{ item }}"
        image: "percona/percona-server:{{ ps_version }}"
        restart_policy: always
        state: absent
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      ignore_errors: yes

    - name: Recursively change ownership of a directory
      shell: "sudo chown -R 1001:1001 {{ data_dir }}/node{{ item }}/data"
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Setup Percona Server group replication
      include_tasks: ./tasks/percona-server-group-replication-setup.yml
      when: setup_type == "gr"

    - name: Setup Percona Server with async replication
      include_tasks: ./tasks/percona-server-async-replication-setup.yml
      when: setup_type == "replication"

    - name: Setup Percona Server
      include_tasks: ./tasks/percona-server-setup.yml
      when: setup_type != "gr" and setup_type != "replication"

    - name: Create slowlog configuration for mysql nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: >
          mysql -uroot -p{{ root_password }} -e "
          SET GLOBAL slow_query_log='ON';
          SET GLOBAL long_query_time=0;
          SET GLOBAL log_slow_admin_statements=ON;
          SET GLOBAL log_slow_slave_statements=ON;
          "
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      when: query_source == "slowlog"

    - name: Install and add pmm client.
      include_tasks: ../tasks/install_pmm_client_centos.yml
      vars:
        container_name: "ps_pmm_{{ ps_version }}_{{ item }}"
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Get already connected services to pmm server
      shell: curl --location --insecure -u"admin:admin" -s --request GET "http://172.105.74.90/v1/management/services" | jq -r '.services[].service_name'
      register: pmm_server_services

    - name: Display already connected services to pmm server
      debug:
        msg: "{{ pmm_server_services.stdout | split('\n') }}"

    - name: Find out if service is already connected to pmm server
      tasks:
        - name: Loop through percona servers
          debug:
            msg: "Percona Server with name: ps_pmm_{{ ps_version }}_{{ item }} already connected to pmm server"
          loop: "{{ range(1, nodes_count | int + 1) | list }}"
          when: "('ps_pmm_' ~ ps_version ~ '_' ~ item) in pmm_server_services.stdout"
#random_service_name_value

    - name: Add service to pmm server
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: pmm-admin add mysql --query-source={{ query_source }} --username=root --password={{ root_password }} --environment=ps-gr-dev --cluster=ps-gr-dev-cluster --replication-set=ps-gr-replication ps_pmm_{{ ps_version }}_{{ item }} --debug 127.0.0.1:3306
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      when: setup_type == "gr"

    - name: Add service to pmm server
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: pmm-admin add mysql --query-source={{ query_source }} --username=root --password={{ root_password }} --environment=ps-replication-dev --cluster=ps-replication-dev-cluster --replication-set=ps-async-replication ps_pmm_{{ ps_version }}_{{ item }} --debug 127.0.0.1:3306
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Add service to pmm server
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: pmm-admin add mysql --query-source={{ query_source }} --username=root --password={{ root_password }} --environment=ps-dev ps_pmm_{{ ps_version }}_{{ item }} --debug 127.0.0.1:3306
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      when: setup_type != "gr" and setup_type != "replication"

    - name: Install sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        user: "root"
        command: >
          /bin/sh -c "
          wget -O epel-release.rpm --progress=dot:giga https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm &&
          rpm -i epel-release.rpm &&
          microdnf install -y sysbench
          "
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Prepare sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: >
          mysql -uroot -p{{ root_password }} -e "
          SET GLOBAL super_read_only = OFF;
          SET GLOBAL read_only = OFF;
          "
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Prepare sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: >
          mysql -uroot -p{{ root_password }} -e "
          CREATE DATABASE sbtest;
          CREATE USER 'sbtest'@'localhost' IDENTIFIED BY 'password';
          GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'localhost';
          CREATE USER 'sbtest'@'127.0.0.1' IDENTIFIED BY 'password';
          GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'127.0.0.1';
          FLUSH PRIVILEGES;
          "
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      when: setup_type != "gr" and setup_type != "replication"

    - name: Prepare sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_1"
        command: >
          mysql -uroot -p{{ root_password }} -e "
          CREATE DATABASE sbtest;
          CREATE USER 'sbtest'@'localhost' IDENTIFIED BY 'password';
          GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'localhost';
          CREATE USER 'sbtest'@'127.0.0.1' IDENTIFIED BY 'password';
          GRANT ALL PRIVILEGES ON *.* TO 'sbtest'@'127.0.0.1';
          FLUSH PRIVILEGES;
          "
      when: setup_type == "gr" or setup_type == "replication"

    - name: Prepare data for sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: >
          sysbench /usr/share/sysbench/oltp_read_write.lua 
            --mysql-host=127.0.0.1 
            --mysql-port=3306 
            --mysql-user=sbtest 
            --mysql-password=password 
            --mysql-db=sbtest 
            --tables=10 
            --table-size=100000 
            prepare
      when: setup_type != "gr" and setup_type != "replication"
      loop: "{{ range(1, nodes_count | int + 1) | list }}"

    - name: Prepare data for sysbench inside of first percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_1"
        command: >
          sysbench /usr/share/sysbench/oltp_read_write.lua 
            --mysql-host=127.0.0.1 
            --mysql-port=3306 
            --mysql-user=sbtest 
            --mysql-password=password 
            --mysql-db=sbtest 
            --tables=10 
            --table-size=100000 
            prepare
      when: setup_type == "gr" or setup_type == "replication"

    - name: Run load for sysbench inside of all percona server nodes
      community.docker.docker_container_exec:
        container: "ps_pmm_{{ ps_version }}_{{ item }}"
        command: >
          sysbench /usr/share/sysbench/oltp_read_write.lua 
            --mysql-host=127.0.0.1 
            --mysql-port=3306 
            --mysql-user=sbtest 
            --mysql-password=password 
            --mysql-db=sbtest 
            --tables=10 
            --table-size=100000 
            --threads=16 
            --time=60 
            run
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
