- name: Set correct nodes count for patroni setup
  set_fact:
    nodes_count: 3
  when: nodes_count | int < 3

- name: Remove old data folders
  shell: 'rm -fr {{ data_dir }}'

- name: Create data directories
  file:
    path: "{{ data_dir }}/node{{ item }}/data"
    state: directory
    mode: '0755'
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Fix permissions on data directory
  become: true
  file:
    path: "{{ data_dir }}/node{{ item }}/data"
    owner: 1001
    group: 1001
    recurse: yes
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Generate etcd configuration
  template:
    src: data/etcd.conf.yaml.j2
    dest: "{{ data_dir }}/node{{ item }}/etcd.conf.yaml"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Generate patroni configuration
  template:
    src: data/patroni.yml.j2
    dest: "{{ data_dir }}/node{{ item }}/patroni.yml"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Create Docker network
  community.docker.docker_network:
    name: "{{ network_name }}"
    state: present
  ignore_errors: yes

- name: Start PostgreSQL containers
  community.docker.docker_container:
    name: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    image: oraclelinux:9
    state: started
    restart_policy: always
    command: sleep infinity
    networks:
      - name: "{{ network_name }}"
    volumes:
      - "{{ data_dir }}/node{{ item }}/data:/data/db"
      - "{{ data_dir }}/node{{ item }}/etcd.conf.yaml:/etcd.conf.yaml:ro"
      - "{{ data_dir }}/node{{ item }}/patroni.yml:/etc/patroni/patroni.yml:ro"
    ports:
      - "{{ pdpgsql_port + item - 1 }}:5432"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Install required packages in Oracle Linux container
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        dnf module disable postgresql
        dnf config-manager --set-enabled ol9_codeready_builder
        dnf install perl-IPC-Run -y
        dnf install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
        dnf config-manager --set-enabled crb
        percona-release enable ppg-{{ pg_version }}
        dnf install -y python3-pip python3-devel binutils python3-click
        dnf install -y percona-postgresql{{ pg_version }}-server percona-patroni etcd python3-python-etcd percona-pgbackrest
        patroni --version
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"


- name: Stop postgres service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    command: >
      /bin/sh -c '
        ps aux
        kill $(pgrep -f "^/usr/pgsql-17/bin/postgres ")
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Start etcd service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        rm -rf /var/lib/pgsql/{{ pg_version }}/data/*
        ps aux | grep postgres
        rm -f /data/db/postmaster.pid
        mkdir -p /data/db/logs
        touch /dev/watchdog
        nohup etcd --config-file /etcd.conf.yaml > /data/db/logs/etcd.log 2>&1 &
        chown -R postgres:postgres /data/db/logs
        chown -R postgres:postgres /dev/watchdog
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"


- name: Wait 5 seconds to etcd to start
  pause:
    seconds: 5

- name: Start patroni service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: postgres
    command: >
      /bin/sh -c '
        nohup patroni /etc/patroni/patroni.yml > /data/db/logs/patroni.log 2>&1 &
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Start patroni service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: postgres
    command: >
      /bin/sh -c '
        /usr/pgsql-{{ pg_version }}/bin/pg_ctl -D /var/lib/pgsql/{{ pg_version }}/data -l /var/lib/pgsql/{{ pg_version }}/data/logfile start
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Log Patroni cluster
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_1"
    command: >
      /bin/sh -c '
        patronictl -c /etc/patroni/patroni.yml list
      '