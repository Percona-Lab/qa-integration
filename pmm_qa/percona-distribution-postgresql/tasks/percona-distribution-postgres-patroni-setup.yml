- name: Set correct nodes count for patroni setup
  set_fact:
    nodes_count: 3
  when: nodes_count | int < 3
- name: Set external facing port in patroni setup
  set_fact:
    pdpgsql_port: 6432

- name: Remove old data folders
  shell: 'rm -fr {{ data_dir }}'

- name: Create data directories
  file:
    path: "{{ data_dir }}/node{{ item }}/data"
    state: directory
    mode: '0755'
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Fix permissions on data directory
  become: true
  file:
    path: "{{ data_dir }}/node{{ item }}/data"
    owner: 1001
    group: 1001
    recurse: yes
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Generate etcd configuration
  template:
    src: data/etcd.conf.yaml.j2
    dest: "{{ data_dir }}/node{{ item }}/etcd.conf.yaml"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Generate patroni configuration
  template:
    src: data/patroni.yml.j2
    dest: "{{ data_dir }}/node{{ item }}/patroni.yml"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Create Docker network
  community.docker.docker_network:
    name: "{{ network_name }}"
    state: present
  ignore_errors: yes

- name: Start PostgreSQL containers
  community.docker.docker_container:
    name: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    image: oraclelinux:9
    state: started
    restart_policy: always
    command: sleep infinity
    networks:
      - name: "{{ network_name }}"
    volumes:
      - "{{ data_dir }}/node{{ item }}/data:/data/db"
      - "{{ data_dir }}/node{{ item }}/etcd.conf.yaml:/etcd.conf.yaml:ro"
      - "{{ data_dir }}/node{{ item }}/patroni.yml:/etc/patroni/patroni.yml:ro"
    ports:
      - "{{ pdpgsql_port + item - 1 }}:5432"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Install required packages in Oracle Linux container
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        dnf config-manager --set-enabled ol9_codeready_builder
        dnf install perl-IPC-Run -y
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
        dnf config-manager --set-enabled crb
        dnf install -y python3-pip python3-devel binutils python3-click
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Install Percona Distribution for PostgresSQL
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        dnf module disable postgresql
        dnf install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
        percona-release enable ppg-{{ pg_version }}
        dnf install -y percona-pg-stat-monitor{{ pg_version }} percona-postgresql{{ pg_version }}-server percona-patroni etcd python3-python-etcd percona-pgbackrest
        patroni --version
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Start etcd service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        rm -rf /var/lib/pgsql/{{ pg_version }}/data/*
        ps aux | grep postgres
        rm -f /data/db/postmaster.pid
        mkdir -p /data/db/logs
        mkdir /pg_wal
        touch /dev/watchdog
        nohup etcd --config-file /etcd.conf.yaml > /data/db/logs/etcd.log 2>&1 &
        chown -R postgres:postgres /data/db/logs
        chown -R postgres:postgres /dev/watchdog
        chown -R postgres:postgres /pg_wal
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"


- name: Wait 5 seconds to etcd to start
  pause:
    seconds: 5

- name: Start patroni service
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: postgres
    command: >
      /bin/sh -c '
        nohup patroni /etc/patroni/patroni.yml > /data/db/logs/patroni.log 2>&1 &
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Install microdnf
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    user: root
    command: >
      /bin/sh -c '
        dnf install -y microdnf
      '
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Install pg stat monitor.
  include_tasks: ./tasks/install_pg_stat-monitor.yml
  vars:
    container_name: "pdpgsql_pmm_patroni_{{ pg_version }}"

- name: Grant pg_monitor to postgres user
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_1"
    user: postgres
    command: >
      bash -c '
        psql -U postgres -d {{ db_name | default("postgres") }} -c "
          GRANT pg_monitor TO postgres;
        "
      '

- name: Install and add pmm client.
  include_tasks: ../tasks/install_pmm_client.yml
  vars:
    container_name: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Get already connected services to pmm server
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_1"
    command: >
      sh -c 'curl --location --insecure -u"admin:{{ admin_password }}" -s --request GET "http://{{ pmm_server_ip }}:{{ '80' if pmm_server_ip is ansible.utils.ipv4 else '8080' }}/v1/management/services" | jq -r ".services[].service_name"'
  register: pmm_server_services

- name: Display already connected services to pmm server
  debug:
    msg: "{{ pmm_server_services.stdout | split('\n') }}"

- name: Find out if service is already connected to pmm server
  block:
    - name: Loop through percona servers
      set_fact:
        random_service_name_value: "_{{ 9999 | random + 1 }}"
      loop: "{{ range(1, nodes_count | int + 1) | list }}"
      when: "('pdpgsql_pmm_patroni_' ~ pg_version ~ '_' ~ item) in pmm_server_services.stdout"

- name: Add service to pmm server
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    command: pmm-admin add postgresql --username=postgres --cluster=pdpgsql_patroni_cluster --environment=pdpgsql_patroni_environment --password=postgres --query-source=pgstatmonitor pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}{{ random_service_name_value }} --debug 127.0.0.1:5432
  loop: "{{ range(1, nodes_count | int + 1) | list }}"

- name: Add patroni service to pmm server
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_1"
    command: pmm-admin add external --listen-port=8008 --service-name=patroni_service_1{{ random_service_name_value }}

- name: Add patroni service to pmm server
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_{{ item }}"
    command: pmm-admin add external --listen-port=8008 --cluster=pdpgsql_patroni_service_cluster --environment=pdpgsql_patroni_service_environment --service-name=patroni_service_{{ item }}{{ random_service_name_value }}
  loop: "{{ range(2, nodes_count | int + 1) | list }}"

- name: Log Patroni cluster
  community.docker.docker_container_exec:
    container: "pdpgsql_pmm_patroni_{{ pg_version }}_1"
    command: >
      /bin/sh -c '
        patronictl -c /etc/patroni/patroni.yml list
      '
